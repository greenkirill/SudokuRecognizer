using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace sudokuSolver10 {
    class OCRDigit {
        private static readonly int[,,] m_zon = new int[,,] {
            {
                {0, 595, 0, 0, 0, 0, 0, 0, 0, 595},
                {0, 1024, 0, 0, 0, 0, 0, 0, 0, 1024},
                {0, 1024, 0, 0, 0, 0, 0, 0, 0, 1024},
                {185, 1024, 0, 0, 0, 0, 0, 0, 0, 1024},
                {671, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024},
                {1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024},
                {595, 595, 595, 595, 595, 595, 595, 595, 595, 1024},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1024},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1024},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1024}
            }, {
                {233, 398, 0, 0, 0, 0, 0, 0, 342, 872},
                {398, 458, 0, 0, 0, 0, 0, 45, 1024, 1024},
                {1024, 233, 0, 0, 0, 0, 0, 595, 671, 1024},
                {1024, 0, 0, 0, 0, 0, 286, 1024, 233, 1024},
                {1024, 0, 0, 0, 0, 89, 872, 595, 0, 1024},
                {1024, 0, 0, 0, 0, 595, 872, 45, 0, 1024},
                {872, 523, 0, 45, 595, 1024, 286, 0, 0, 1024},
                {398, 1024, 872, 872, 1024, 595, 0, 0, 0, 1024},
                {45, 759, 1024, 1024, 595, 0, 0, 0, 0, 1024},
                {0, 45, 286, 233, 0, 0, 0, 0, 0, 1024}
            }, {
                {233, 398, 0, 0, 0, 0, 0, 0, 759, 398},
                {398, 458, 0, 0, 0, 0, 0, 0, 398, 595},
                {1024, 286, 0, 0, 0, 0, 0, 0, 89, 1024},
                {1024, 0, 0, 0, 523, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 45, 1024, 0, 0, 0, 0, 1024},
                {1024, 342, 0, 458, 1024, 286, 0, 0, 458, 759},
                {458, 1024, 671, 1024, 398, 872, 342, 458, 1024, 398},
                {233, 1024, 1024, 595, 0, 872, 1024, 1024, 872, 45},
                {0, 233, 342, 0, 0, 137, 595, 595, 89, 0}
            }, {
                {0, 0, 0, 0, 233, 1024, 1024, 0, 0, 0},
                {0, 0, 0, 45, 759, 595, 1024, 0, 0, 0},
                {0, 0, 0, 595, 671, 0, 1024, 0, 0, 0},
                {0, 0, 458, 872, 89, 0, 1024, 0, 0, 0},
                {0, 286, 1024, 233, 0, 0, 1024, 0, 0, 0},
                {137, 1024, 342, 0, 0, 0, 1024, 0, 0, 0},
                {759, 872, 398, 398, 398, 398, 1024, 398, 398, 398},
                {1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024},
                {398, 398, 398, 398, 398, 398, 1024, 398, 398, 398},
                {0, 0, 0, 0, 0, 0, 1024, 0, 0, 0}
            }, {
                {45, 45, 45, 45, 45, 0, 0, 0, 523, 286},
                {1024, 1024, 1024, 1024, 1024, 0, 0, 0, 398, 595},
                {1024, 1024, 1024, 1024, 1024, 0, 0, 0, 286, 1024},
                {1024, 45, 45, 45, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 342, 0, 0, 342, 759},
                {1024, 0, 0, 0, 523, 759, 342, 342, 1024, 398},
                {1024, 0, 0, 0, 233, 1024, 1024, 1024, 872, 45},
                {671, 0, 0, 0, 0, 342, 759, 671, 137, 0}
            }, {
                {0, 0, 185, 671, 1024, 1024, 1024, 671, 89, 0},
                {0, 286, 1024, 1024, 1024, 1024, 1024, 1024, 872, 45},
                {0, 1024, 759, 342, 458, 398, 137, 342, 872, 398},
                {398, 759, 45, 0, 759, 0, 0, 0, 342, 872},
                {595, 342, 0, 0, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 0, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 1024, 45, 0, 0, 89, 1024},
                {1024, 0, 0, 0, 759, 595, 0, 45, 595, 523},
                {872, 0, 0, 0, 398, 1024, 872, 872, 1024, 286},
                {0, 0, 0, 0, 0, 671, 1024, 1024, 458, 0}
            }, {
                {1024, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1024, 0, 0, 0, 0, 0, 0, 0, 0, 523},
                {1024, 0, 0, 0, 0, 0, 0, 45, 671, 1024},
                {1024, 0, 0, 0, 0, 0, 185, 759, 1024, 595},
                {1024, 0, 0, 0, 0, 286, 1024, 1024, 342, 0},
                {1024, 0, 0, 0, 458, 1024, 872, 286, 0, 0},
                {1024, 0, 45, 595, 1024, 671, 89, 0, 0, 0},
                {1024, 89, 759, 1024, 595, 45, 0, 0, 0, 0},
                {1024, 872, 1024, 342, 0, 0, 0, 0, 0, 0},
                {1024, 872, 286, 0, 0, 0, 0, 0, 0, 0}
            }, {
                {0, 342, 759, 342, 0, 233, 1024, 1024, 523, 0},
                {233, 1024, 1024, 1024, 233, 872, 1024, 1024, 1024, 342},
                {523, 595, 286, 759, 759, 458, 45, 89, 671, 595},
                {1024, 137, 0, 342, 1024, 0, 0, 0, 233, 1024},
                {1024, 0, 0, 0, 1024, 89, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 595, 398, 0, 0, 0, 1024},
                {1024, 89, 0, 0, 671, 398, 0, 0, 89, 1024},
                {523, 595, 233, 458, 595, 595, 137, 89, 595, 523},
                {286, 1024, 1024, 1024, 137, 759, 1024, 1024, 1024, 233},
                {0, 342, 671, 286, 0, 233, 1024, 1024, 458, 0}
            }, {
                {0, 458, 1024, 1024, 671, 0, 0, 0, 0, 0},
                {286, 1024, 872, 872, 1024, 398, 0, 0, 0, 872},
                {523, 595, 45, 0, 595, 759, 0, 0, 0, 1024},
                {1024, 89, 0, 0, 45, 1024, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 0, 1024, 0, 0, 0, 1024},
                {1024, 0, 0, 0, 0, 1024, 0, 0, 342, 671},
                {872, 342, 0, 0, 0, 671, 0, 45, 759, 398},
                {398, 872, 342, 137, 458, 523, 342, 759, 1024, 45},
                {45, 872, 1024, 1024, 1024, 1024, 1024, 1024, 286, 0},
                {0, 137, 671, 1024, 1024, 1024, 671, 185, 0, 0}
            }
        };

        private const int INT_MAX = 2147483647;

        private static readonly int[] m_ratios = new int[]{46, 64, 64, 66, 64, 66, 60, 66, 66};
        public int Classify(byte[,] blob, Point lb, Point rt) {

            int R = 10;
            int[,] test = new int[R,R];
            int x, y, i, sum, count, roof=0, result=-1;
            int width  = rt.X - lb.X;
            int height = rt.Y - lb.Y;

            if (width < 2 || height < 5)
                return -3;
            int[] OCR = new int[10];
            int[] xslice = new int[R+1];
            int[] yslice = new int[R+1];
            for (int j = 0; j < R + 1; j++) {
                xslice[j] = lb.X + j * width / R;
                yslice[j] = lb.Y + j * height / R;
            }
            xslice[R] -= 1;
            yslice[R] -= 1;
            
            for (y = 0; y < R; y++) {
                for (x = 0; x < R; x++) {
                    sum = count = 0;
                    for (int yy = yslice[y + 1]; yy >= yslice[y]; yy--) {
                        for (int xx = xslice[x + 1]; xx >= xslice[x]; xx--) {
                            count++;
                            if (blob[xx, yy] == 0) 
                            {
                                sum += 1024;
                            }
                        }
                    }
                    test[y, x] = sum / count;
                    if (roof < test[y, x])
                        roof = test[y, x];
                }
            }

            if (roof == 0)
                roof = 1; 
                            /*Bitmap iimg = new Bitmap(R,R);
                            for (int I = 0; I < R; I++) {
                                for (int j = 0; j < R; j++) {
                                    iimg.SetPixel(I, j, Color.FromArgb(255 - 255 * test[I, j] / roof, 255 - 255 * test[I, j] / roof, 255 - 255 * test[I, j] / roof));
                                }
                            }*/
                            

            for (y = 0; y < R; y++) {
                for (x = 0; x < R; x++) {
                    test[y, x] = (test[y, x] * 1024) / roof;
                }
            }

            /*iimg.Save("kkk"+(sudokuImg.iterator-1)+"qq.jpg", ImageFormat.Jpeg);
            for (int j = 0; j < 9; j++) {
                iimg = new Bitmap(R, R);
                for (int k = 0; k < R; k++) {
                    for (int l = 0; l < R; l++) {
                          iimg.SetPixel(l, k, Color.FromArgb(255 - 255 * m_zon[j,k,l] / 1024, 255 - 255 * m_zon[j , k, l] / 1024, 255 - 255 * m_zon[j , k, l] / 1024));
                    }
                }
                iimg.Save("aaa" + j + "qq.jpg", ImageFormat.Jpeg);
            }*/

            roof = INT_MAX;
            for (i = 0; i < 9; i++) {
                sum = 0;
                for (y = 0; y < R; y++) {
                    for (x = 0; x < R; x++) {
                        sum += Math.Abs(test[y, x] - m_zon[i, x,y]);
                    }
                }

                sum += Math.Abs(width * 100 / height - m_ratios[i]) * 300;

                if (roof > sum) {
                    roof = sum;
                    result = i + 1;
                }
                OCR[i + 1] = sum;
            }


            if (result != 1) {
                if ((width * 100) / height < 37)  
                {
                    result = 1;
                    OCR[1] = 0;
                }
                if (result == 8) {
                    sum = 0;
                    for (int j = 0; j < width/2; j++) {
                        sum = 0;
                        for (int k = 0; k < height; k++) {
                            if (blob[lb.X+j, lb.Y+k] == 0) sum++;
                        }
                        if (sum > height*0.6)
                            break;
                    }
                    if (sum <= height*0.6) {
                        result = 3;
                    }
                }
                else if (result == 6) {
                    for (int j = lb.Y + height/2; j < lb.Y + height; j++) {
                        bool a = true;
                        for (int k = lb.X; k < lb.X+width/2; k++) {
                            if (blob[k, j] == 0) {
                                a = false;
                                break;
                            }
                        }
                        if (a) {
                            result = 5;
                            break;
                        }
                    }
                }
            }
            else {
                if ((width * 100) / height > 53)  
                {
                    OCR[1] = INT_MAX;

                    roof = INT_MAX;
                    for (i = 2; i < 10; i++) {
                        if (roof > OCR[i]) {
                            roof = OCR[i];
                            result = i;
                        }
                    }
                }
            }

            return result;
        }
    }
}
